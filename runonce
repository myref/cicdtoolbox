#!/bin/bash 

sp="/-\|"
sc=0
spin() {
   printf -- "${sp:sc++:1}  ( ${t} sec.) \r"
   ((sc==${#sp})) && sc=0
   sleep 1
   let t+=1
}

endspin() {
   printf "\r%s\n" "$@"
}

echo "****************************************************************************************************************"
echo " Start clean" 
echo "****************************************************************************************************************"
docker compose --project-name cicd-toolbox down --remove-orphans
docker compose --project-name cicd-toolbox rm -f
docker volume rm $(docker volume ls -q)
rm -f *_token
rm -f install/tests/log.html
rm -f install/tests/output.xml
rm -f install/tests/report.html
rm -f install/tests/*.png
rm -f install/tests/*.log
rm -rf install/log/*
rm *_log.html
rm *_report.html
rm *.xml
cat /dev/null > hosts_additions.txt
echo " " 
echo "****************************************************************************************************************"
echo " Making sure all containers are reachable locally with the name in the"
echo " hosts file."
echo "****************************************************************************************************************"
echo " " 
sudo chmod o+w /etc/hosts
if grep -q "seleniumffhost" /etc/hosts; then
    sudo sed -i "/seleniumffhost.internal.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}/d" /etc/hosts
fi
echo "172.16.10.100   seleniumffhost.internal.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}" >> /etc/hosts
if [ "$install_mode" = "vm" ]; then
    echo $host_ip"   seleniumffhost.internal.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}" >> hosts_additions.txt
fi
if grep -q "seleniumgchost" /etc/hosts; then
    sudo sed -i "/seleniumgchost.internal.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}/d" /etc/hosts
fi
echo "172.16.10.101   seleniumgchost.internal.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}" >> /etc/hosts
if [ "$install_mode" = "vm" ]; then
    echo $host_ip"   seleniumgchost.internal.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}" >> hosts_additions.txt
fi
sudo chmod o-w /etc/hosts
echo "****************************************************************************************************************"
echo " Setting up Chrome host for Selenium" 
echo "****************************************************************************************************************"
docker compose --project-name cicd-toolbox up -d --build --no-deps seleniumgchost
echo "****************************************************************************************************************"
echo " Setting up Firefox host for Selenium" 
echo "****************************************************************************************************************"
docker compose --project-name cicd-toolbox up -d --build --no-deps seleniumffhost
echo "****************************************************************************************************************"
echo " Setting up Vault" 
echo "****************************************************************************************************************"
vault/install.sh | tee install/log/vault_create.log
echo " " 
echo "****************************************************************************************************************"
echo " Creating database"
echo "****************************************************************************************************************"
cicdtoolbox-db/install.sh | tee install/log/cicdtoolbox-db_create.log
echo " " 
echo "****************************************************************************************************************"
echo " Creating LDAP server" 
echo "****************************************************************************************************************"
lldap/install.sh | tee install/log/lldap_create.log
echo " "
echo "****************************************************************************************************************"
echo " Creating Keycloak "
echo "****************************************************************************************************************"
keycloak/install.sh | tee install/log/keycloak_install.log
echo "****************************************************************************************************************"
echo " Creating keycloak-vault integration"
echo "****************************************************************************************************************"
vault/vault_install_post_keycloak.sh | tee install/log/vault_keycloak.log
echo "****************************************************************************************************************"
echo " Creating gitea setup"
echo "****************************************************************************************************************"
gitea/install.sh | tee install/log/gitea_create.log
gitea/users.sh | tee install/log/gitea_users.log
echo " " 
echo "****************************************************************************************************************"
echo " Starting Jenkins"
echo "****************************************************************************************************************"
jenkins/install.sh
echo " "
echo "****************************************************************************************************************"
echo " Starting Pulp"
echo "****************************************************************************************************************"
pulp/install.sh ${local_admin_password} | tee install/log/pulp_create.log
echo " "
echo "****************************************************************************************************************"
echo " Starting Portainer"
echo "****************************************************************************************************************"
portainer/install.sh ${local_admin_password} | tee install/log/portainer_create.log
echo " "
echo "****************************************************************************************************************"
echo " Validating install"
echo "****************************************************************************************************************"
robot --variable VALID_PASSWORD:${default_user_password} -d install/log -o 100_install_test.xml -l 100_install_test_log.html -r 100_install_test_report.html install/tests
echo " " 
echo "****************************************************************************************************************"
echo " Running trivy vulnerability scanner (https://github.com/aquasecurity/trivy)" 
echo "****************************************************************************************************************"
if command -v trivy &> /dev/null
then
   echo "****************************************************************************************************************"
   echo " Toolbox files" 
   echo "****************************************************************************************************************"
   trivy fs --security-checks vuln,config . | tee install/log/trivy_create.log

   echo "****************************************************************************************************************"
   echo " Gitea" 
   echo "****************************************************************************************************************"
   trivy image gitea/gitea:rootless >> install/log/trivy_create.log
   echo "****************************************************************************************************************"
   echo " Jenkins" 
   echo "****************************************************************************************************************"
   trivy image jenkins/jenkins:lts >> install/log/trivy_create.log
   echo "****************************************************************************************************************"
   echo " Keycloak" 
   echo "****************************************************************************************************************"
   trivy image jboss/keycloak:latest >> install/log/trivy_create.log
   echo "****************************************************************************************************************"
   echo " PostgreSQL" 
   echo "****************************************************************************************************************"
   trivy image postgres:latest >> install/log/trivy_create.log
else
    echo "trivy is not installed"
fi
echo "****************************************************************************************************************"
echo " Consolidating all robot test reports into one"
echo "****************************************************************************************************************"
rebot --norpa -d install/ --output runonce.xml --log runonce_log.html --report runonce_report.html  ./install/log/*.xml
echo "****************************************************************************************************************"
echo " The pipeline uses the default Cisco DevNet CML Sandbox credentials developer/C1sco12345 to log in to CML."
echo " You may change this to your own credentials in:"
echo " "
echo " http://jenkins.tooling.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}:8084/credentials/store/system/domain/_/credential/CML-SIM-CRED/update"
echo " "
echo " Due to limitations in Keycloak, do **not** use docker compose --project-name cicd-toolbox down. Keycloak will no longer function after this."
echo " "
echo " Stop the environment with ./down, start with ./up"
echo " "
echo "****************************************************************************************************************"
echo "CICD-toolbox install done "
echo "****************************************************************************************************************"
echo " "
echo "****************************************************************************************************************"
echo "Copying logfiles to pulp"
echo "****************************************************************************************************************"
echo " "
if [[ -d install/log ]]; then
   find install/log -type f | xargs -I {} pulp --no-verify-ssl  -b --format none --username admin --password "${local_admin_password}" file content upload --repository toolbox_install --file "{}" --relative-path "{}" >> install/log/pulp.log
fi
find install/runonce?* -type f | xargs -I {} pulp --no-verify-ssl  -b --format none --username admin --password "${local_admin_password}" file content upload --repository toolbox_install --file "{}" --relative-path "{}" >> install/log/pulp.log
echo "****************************************************************************************************************"
echo "Done!"
echo "****************************************************************************************************************"
echo " "
echo "You can read the install test reports in https://pulp.tooling.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}/pulp/content/install/logs/install/log/"
echo " "
echo "You can reach the servers on:"
echo " "
echo " Vault:       https://vault.services.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}:8200"
echo " LLDAP:       http://ldap.iam.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}:17170"
echo " Keycloak:    https://keycloak.services.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}:8443"
echo " Gitea:       https://gitea.tooling.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}:3000"
echo " Jenkins:     https://jenkins.tooling.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}:8084"
echo " Pulp :       https://pulp.tooling.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}/ui/status/"
echo " Firefox:     http://seleniumffhost.internal.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}:4444 (Dashboard)"
echo "              http://seleniumffhost.internal.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}:7900 (NoVNC)"
echo " Chrome:      http://seleniumgchost.internal.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}:4444 (Dashboard)"
echo "              http://seleniumgchost.internal.${DOMAIN_NAME_SL}.${DOMAIN_NAME_TL}:7900 (NoVNC)"
echo " "
echo "The development hosts are exposed (user: jenkins) through ssh on:"
echo " "
echo " Dev:         ssh -p 16122 "
echo " Test:        ssh -p 16123 "
echo " Acc:         ssh -p 16124 "
echo " Prod:        ssh -p 16125 "
echo "****************************************************************************************************************"